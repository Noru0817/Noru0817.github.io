<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://noru0817.github.io/</id><title>Noru0817</title><subtitle>Kubernetes, 컴퓨터구조, 운영체제, 데이터베이스</subtitle> <updated>2024-09-10T11:34:01+09:00</updated> <author> <name>노루</name> <uri>https://noru0817.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://noru0817.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="https://noru0817.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator> <rights> © 2024 노루 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>마이크로서비스 &amp; 도커(Docker) 🐳</title><link href="https://noru0817.github.io/posts/Docker/" rel="alternate" type="text/html" title="마이크로서비스 &amp; 도커(Docker) 🐳" /><published>2024-09-09T18:52:45+09:00</published> <updated>2024-09-10T11:08:18+09:00</updated> <id>https://noru0817.github.io/posts/Docker/</id> <content src="https://noru0817.github.io/posts/Docker/" /> <author> <name>노루</name> </author> <category term="Docker" /> <category term="Terms" /> <summary> 안녕하세요! 오늘은 마이크로서비스와 Docker에 대하여 간단하게 용어 설명해드리려고 합니다. 최근 들어 사용자에게 제공되는 서비스들은 주로 ‘마이크로서비스 아키텍처(Microservice Architecture)’라는 특성으로 제공됩니다. 마이크로서비스에 대해 설명하기에 앞서, 기존에 있던 방식인 모놀리틱(Monolithic) 방식에 대해 설명드려야겠죠? 모놀리틱 구조란 기존의 전통적인 웹 시스템 개발 스타일로, 하나의 애플리케이션 내에 모든 로직들이 들어가있는 방식을 이야기합니다. 모놀리틱 구조의 특징은 다음과 같습니다. 모놀리틱 구조 특징 call-by-reference : 각 컴포넌트들은 상호 호출 함수를 이용하는 구조 간편한 개발 및 배포 : 전체 애플리케이션을 개발툴 등을 이... </summary> </entry> <entry><title>쿠버네티스 기반 학과 서버 설계</title><link href="https://noru0817.github.io/posts/K8s-Architecture/" rel="alternate" type="text/html" title="쿠버네티스 기반 학과 서버 설계" /><published>2024-09-08T10:15:38+09:00</published> <updated>2024-09-10T11:33:33+09:00</updated> <id>https://noru0817.github.io/posts/K8s-Architecture/</id> <content src="https://noru0817.github.io/posts/K8s-Architecture/" /> <author> <name>노루</name> </author> <category term="Kubernetes" /> <category term="Server" /> <summary> 드디어, 실질적으로 서버 구축에 대한 이야기를 다루게 되었습니다 ㅎㅎ 저를 비롯한 다른 연구생 분들도 정말 구하기 힘든 정보 모으고, 정제하느라 꽤 많은 시간을 보냈는데요(여름방학 2달 내내 했습니다…), 그 중에서 개인이 물리적 PC를 여러 대 가지고 있다면 시도해볼 수 있는 ‘클러스터 구축’에 대한 설계를 설명드리려고 합니다. 오늘은 기본적인 용어부터 정의하고, 다음 글에 실질적 클러스터 구축에 대해 설명해볼게요! 항상 실질적인 적용 이전에 용어 설명이나, 배경 설명으로 인해 답답하게 느끼시는 분들도 계실텐데, 매번 빨리 전달드리지 못하는 점 죄송합니다…ㅠㅠ 아무래도 공학적인 관점에서 ‘같은 용어도 분야, 종사하고 있는 직장’에 따라 상이하게 사용되는 경향이 있는지라 누군가에게 설명을 하기에 ... </summary> </entry> <entry><title>AI 알고리즘 1주차</title><link href="https://noru0817.github.io/posts/AI-algorithm-1st-week/" rel="alternate" type="text/html" title="AI 알고리즘 1주차" /><published>2024-09-07T15:26:38+09:00</published> <updated>2024-09-08T01:37:51+09:00</updated> <id>https://noru0817.github.io/posts/AI-algorithm-1st-week/</id> <content src="https://noru0817.github.io/posts/AI-algorithm-1st-week/" /> <author> <name>노루</name> </author> <category term="3학년 2학기" /> <category term="AI 알고리즘" /> <summary> 이번 글에선 AI 알고리즘 1주차 내용인 ‘이분법’에 대해 설명해드리려고 합니다. 우리가 흔히 AI라고 부르는 기술을 만드는 과정은 딥러닝을 활용하여 최적의 해를 찾을 수 있는 정답에 가까운 방정식을 찾아가는 것입니다. 이때 ‘정답에 가까운’이라는 표현이 중요한데요, 사용자가 정답을 찾길 바라는 어떤 문제에 대한 답은 어떠한 특정 방정식을 만족한다는 사실을 제외하고는 정보가 거의 없는 ‘수’일 때가 많습니다. (여기서 ‘입력값이 문자면?’이라는 의문점을 가지실수도 있는데, 실제로 모델을 만드는 과정에서 입력값이 문자일 경우 해당 문자를 수의 형태로 ‘인코딩(Encoding)’하여 알고리즘에서 사용합니다) 따라서 정보가 부족했던 수를 마치 정보가 있는 것처럼, 즉 ‘정답은 아니지만 그와 유사한 형태... </summary> </entry> <entry><title>포스팅 게재 계획 변경</title><link href="https://noru0817.github.io/posts/Study-Plan/" rel="alternate" type="text/html" title="포스팅 게재 계획 변경" /><published>2024-09-06T13:00:38+09:00</published> <updated>2024-09-07T15:00:25+09:00</updated> <id>https://noru0817.github.io/posts/Study-Plan/</id> <content src="https://noru0817.github.io/posts/Study-Plan/" /> <author> <name>노루</name> </author> <category term="공지" /> <summary> 막상 학기가 개강하고 나니, ‘다른 강의도 정리해두는게 좋지 않을까?’ 하는 생각이 갑자기 들었습니다… ㅎㅎ 이번 학기 학부 연구생, 기초종합설계가 정말 많은 시간을 소요할 것으로 예상이 되는지라, 시간이 남을 때 틈틈히 정리해야겠더라구요. (실제로 지금도 정신이 없습니다) 그래서! 저번에 말씀 드렸던 분야 외에도 ‘AI 알고리즘, 컴퓨터 네트워크, 소프트웨어 공학’도 계속 올릴 예정입니다. 많이 부족하지만, 그래도 최대한 배운 내용 그대로 올리도록 노력해보겠습니다 ㅎㅎ 다음 글부터는 학기 중 과목 &amp;amp; 쿠버네티스가 같이 올라갈 예정입니다. 항상 읽어주셔서 감사합니다!!! (꾸벅) </summary> </entry> <entry><title>Rook-Ceph 구성 요소</title><link href="https://noru0817.github.io/posts/Rook-Ceph-Components/" rel="alternate" type="text/html" title="Rook-Ceph 구성 요소" /><published>2024-09-05T16:09:21+09:00</published> <updated>2024-09-05T16:09:21+09:00</updated> <id>https://noru0817.github.io/posts/Rook-Ceph-Components/</id> <content src="https://noru0817.github.io/posts/Rook-Ceph-Components/" /> <author> <name>노루</name> </author> <category term="Kubernetes" /> <category term="Rook-Ceph" /> <summary> 이번 글에서는 저번 글에 이어 Rook-Ceph 구성요소에 대해 간략히 설명 드리겠습니다. 지난 월요일부터 개강했는데, 간단한 프로젝트일 줄 알았던 기초설계 과목이 갑작스럽게 모든 기업체가 LLM 기반 생성형 AI를 토대로 서비스 개발을 뜻하시는 바람에… 지난 학기 이후로 잠시 접어두었던 딥러닝 공부를 다시 시작했습니다 ㅠㅠ 이에 더해 학부 연구생 업무까지 시간이 매우 촉박해져 Rook-Ceph에 대한 자세한 설명은 최소한 2주 뒤부터 시작해야될 것 같습니다 (ㅜ^ㅜ) 당장은 자세히 설명 못드리는 점, 넓은 마음으로 양해 부탁드립니다… 현재 학과 서버 환경에는 다음과 같은 구성 요소들을 통해 PV를 관리 및 제공합니다. [Rook Level Component] Operator:... </summary> </entry> </feed>
